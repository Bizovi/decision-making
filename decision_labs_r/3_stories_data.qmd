---
title: "Telling stories with data"
format: html
---

```{r}
library(tidyverse)
library(lubridate)
library(opendatatoronto)
library(janitor)
library(tinytable) # gt for fully fledged tables
```

## Australian parliamentary election

- Plan and Design: research question
    - how the dataset will look like
    - how final graphs will look like
- Simulate - Collect Data - Explore - Share

```{r}
# this is more of a schema / data contract.
# normally we go much further and simulate the process or from prior knowledge
# to define our expectations
simulated_data <- tibble(
    "division" = 1:151,
    "party" = sample(
        x = c("liberal", "labor", "national", "green", "other"),
        size = 151,
        replace = TRUE,
    )
)
simulated_data |> head()
```

```{r}
if (file.exists("data/aus_voting.csv")) {
    raw_elections_data <- read_csv(file = "data/aus_voting.csv", show_col_types = FALSE)
} else {
   raw_elections_data <- read_csv(
        file = "https://results.aec.gov.au/27966/website/Downloads/HouseMembersElectedDownload-27966.csv",
        show_col_types = FALSE,
        skip = 1,
    )
    write_csv(x = raw_elections_data, file = "data/aus_voting.csv")
}
raw_elections_data |> head()
```

```{r}
clean_data <- raw_elections_data |> 
    janitor::clean_names() |>
    rename(
        division = division_nm,
        elected_party = party_nm,
    ) |>
    mutate(
        elected_party = case_match(
            elected_party,
            "Australian Labor Party" ~ "Labor",
            "Liberal National Party of Queensland" ~ "Liberal",
            "Liberal" ~ "Liberal",
            "The Nationals" ~ "Nationals",
            "The Greens" ~ "Greens",
            "Independent" ~ "Other",
            "Katter's Australian Party (KAP)" ~ "Other",
            "Centre Alliance" ~ "Other"
        )
    )

clean_data |> 
    select(division, elected_party) |>
    count(elected_party) |>
    mutate(elected_party = fct_reorder(elected_party, desc(n))) |>
    ggplot(aes(x = elected_party, y = n)) +
    geom_bar(stat = "identity") + 
    theme_minimal() + 
    labs(x = "Party", y = "Number of seats")
```
```{r}
clean_data |>
    group_by(state_ab, elected_party) |>
    summarise(n = n()) |>
    group_by(state_ab) |>
    mutate(n_state = sum(n)) |>
    ggplot(aes(y = fct_reorder(state_ab, n_state), x = n, fill = elected_party)) + 
    geom_col() + 
    scale_fill_brewer(palette = "Set2") + 
    labs(y = "State", x = "Nr. Seats") +
    theme_minimal()
```



## Toronto unhoused population

Working with API keys -- happy case when we have a package in R to abstract away the details.

```{r}
raw_igme_data <- read_csv(
    file = "https://childmortality.org/wp-content/uploads/2021/09/UNIGME-2021.csv",
    show_col_types = FALSE
)

write_csv(x = raw_igme_data, file = "data/igme.csv")
raw_igme_data |> head()
```

```{r}
cleaned_igme_data <-
  clean_names(raw_igme_data) |>
  filter(
    sex == "Total",
    series_name == "UN IGME estimate",
    geographic_area %in% c("Argentina", "Australia", "Canada", "Kenya"),
    indicator == "Neonatal mortality rate"
    ) |>
  select(geographic_area, time_period, obs_value) |>
  mutate(
    time_period = str_remove(time_period, "-06"),
    time_period = as.integer(time_period)
  ) |>
  filter(time_period >= 1971) |>
  rename(nmr = obs_value, year = time_period, country = geographic_area)


head(cleaned_igme_data)
```

```{r}
cleaned_igme_data |>
  ggplot(aes(x = year, y = nmr, color = country)) +
  geom_line() +
  theme_minimal() +
  labs(x = "Year", y = "Neonatal Mortality Rate (NMR)", color = "Country") +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")
```












